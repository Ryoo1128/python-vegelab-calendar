import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { CalendarIcon, Edit2 } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { apiRequest, queryClient } from "@/lib/queryClient";
import type { Task, Farm, Crop } from "@shared/schema";

interface EditTaskDialogProps {
  task: Task;
  trigger?: React.ReactNode;
}

export function EditTaskDialog({ task, trigger }: EditTaskDialogProps) {
  const [open, setOpen] = useState(false);
  const [title, setTitle] = useState(task.title);
  const [taskType, setTaskType] = useState(task.taskType);
  const [startDate, setStartDate] = useState<Date | undefined>(
    task.scheduledDate ? new Date(task.scheduledDate) : undefined
  );
  const [endDate, setEndDate] = useState<Date | undefined>(
    task.endDate ? new Date(task.endDate) : undefined
  );
  const [description, setDescription] = useState(task.description || "");
  const [selectedFarmId, setSelectedFarmId] = useState(task.farmId || "");
  const [selectedCropId, setSelectedCropId] = useState(task.cropId || "");
  const [selectedRows, setSelectedRows] = useState<number[]>([]);
  const [isAutoTitle, setIsAutoTitle] = useState(true); // 자동 제목 생성 여부

  const { data: farms } = useQuery<Farm[]>({
    queryKey: ["/api/farms"],
  });

  const { data: crops } = useQuery<Crop[]>({
    queryKey: ["/api/crops"],
  });

  // 이랑 번호 추출
  useEffect(() => {
    if (task.description && task.description.includes("이랑:")) {
      const match = task.description.match(/이랑:\s*(\d+)번/);
      if (match) {
        setSelectedRows([parseInt(match[1])]);
      }
    }
  }, [task.description]);

  const selectedFarm = farms?.find(farm => farm.id === selectedFarmId);
  const selectedCrop = crops?.find(crop => crop.id === selectedCropId);

  // 기본 제목 생성 함수
  const generateDefaultTitle = () => {
    if (selectedCrop && taskType) {
      return `${selectedCrop.name} ${taskType}`;
    }
    return task.title;
  };

  // 작물이나 작업 종류가 변경될 때 자동으로 제목 업데이트
  useEffect(() => {
    if (isAutoTitle && selectedCrop && taskType) {
      setTitle(`${selectedCrop.name} ${taskType}`);
    }
  }, [selectedCropId, taskType, selectedCrop, isAutoTitle]);

  // 제목을 수동으로 변경하면 자동 업데이트 비활성화
  const handleTitleChange = (newTitle: string) => {
    setTitle(newTitle);
    const autoGeneratedTitle = generateDefaultTitle();
    setIsAutoTitle(newTitle === autoGeneratedTitle || newTitle === "");
  };

  // 환경별 이랑 수 계산
  const getRowCount = (environment?: string) => {
    if (!environment) return 43;
    if (environment === "시설1") return 20;
    if (environment === "시설2") return 10;
    return 43; // 노지
  };

  const rowCount = getRowCount(selectedFarm?.environment);

  const workTypes = [
    "파종", "육묘", "정식", "웃거름주기", "방제", "멀칭", "순지르기",
    "곁순제거", "지주세우기", "유인", "적심", "수확", "선별", "저장", "포장"
  ];

  const handleRowToggle = (row: number) => {
    setSelectedRows(prev => 
      prev.includes(row) 
        ? prev.filter(r => r !== row)
        : [...prev, row]
    );
  };

  const handleUpdate = async () => {
    try {
      const updateData = {
        title,
        taskType,
        farmId: selectedFarmId,
        cropId: selectedCropId,
        scheduledDate: startDate?.toLocaleDateString('sv-SE'),
        endDate: endDate?.toLocaleDateString('sv-SE'),
        description: selectedRows.length > 0 ? `이랑: ${selectedRows.join(", ")}번` : description,
      };

      await fetch(`/api/tasks/${task.id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updateData),
      });

      queryClient.invalidateQueries({ queryKey: ["/api/tasks"] });
      setOpen(false);
    } catch (error) {
      console.error("Failed to update task:", error);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="ghost" size="icon">
            <Edit2 className="w-4 h-4" />
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>일정 수정</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {/* 제목 */}
          <div>
            <Label htmlFor="title">제목</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => handleTitleChange(e.target.value)}
              placeholder={generateDefaultTitle()}
            />
            {isAutoTitle && (
              <p className="text-sm text-gray-500 mt-1">
                자동 생성: {generateDefaultTitle()}
              </p>
            )}
          </div>

          {/* 농장 선택 */}
          <div>
            <Label>농장 선택</Label>
            <Select value={selectedFarmId} onValueChange={setSelectedFarmId}>
              <SelectTrigger>
                <SelectValue placeholder="농장을 선택하세요" />
              </SelectTrigger>
              <SelectContent>
                {farms?.map((farm) => (
                  <SelectItem key={farm.id} value={farm.id || ""}>
                    {farm.name} ({farm.environment}) - {getRowCount(farm.environment)}이랑
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* 작물 선택 */}
          <div>
            <Label>작물 선택</Label>
            <Select value={selectedCropId} onValueChange={(value) => {
              setSelectedCropId(value);
              if (isAutoTitle) {
                const newCrop = crops?.find(c => c.id === value);
                if (newCrop && taskType) {
                  setTitle(`${newCrop.name} ${taskType}`);
                }
              }
            }}>
              <SelectTrigger>
                <SelectValue placeholder="작물을 선택하세요" />
              </SelectTrigger>
              <SelectContent>
                {crops?.map((crop) => (
                  <SelectItem key={crop.id} value={crop.id || ""}>
                    {crop.name || crop.category}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* 작업 유형 */}
          <div>
            <Label>작업 유형</Label>
            <Select value={taskType} onValueChange={(value) => {
              setTaskType(value);
              if (isAutoTitle && selectedCrop) {
                setTitle(`${selectedCrop.name} ${value}`);
              }
            }}>
              <SelectTrigger>
                <SelectValue placeholder="작업을 선택하세요" />
              </SelectTrigger>
              <SelectContent>
                {workTypes.map((work) => (
                  <SelectItem key={work} value={work}>
                    {work}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* 날짜 범위 선택 */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>시작 날짜</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !startDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {startDate ? format(startDate, "PPP") : "날짜 선택"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={startDate}
                    onSelect={setStartDate}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div>
              <Label>종료 날짜</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !endDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {endDate ? format(endDate, "PPP") : "날짜 선택"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={endDate}
                    onSelect={setEndDate}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>

          {/* 이랑 선택 */}
          {selectedFarmId && (
            <div>
              <Label>이랑 선택 ({selectedFarm?.environment})</Label>
              <div className="max-h-32 overflow-y-auto border rounded p-2">
                <div className="grid grid-cols-5 gap-2">
                  {Array.from({ length: rowCount }, (_, i) => i + 1).map((row) => (
                    <div key={row} className="flex items-center space-x-2">
                      <Checkbox
                        id={`row-${row}`}
                        checked={selectedRows.includes(row)}
                        onCheckedChange={() => handleRowToggle(row)}
                      />
                      <Label htmlFor={`row-${row}`} className="text-sm">
                        {row}번
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
              {selectedRows.length > 0 && (
                <p className="text-sm text-gray-600 mt-2">
                  선택된 이랑: {selectedRows.join(", ")}번
                </p>
              )}
            </div>
          )}

          {/* 설명 */}
          <div>
            <Label htmlFor="description">설명</Label>
            <Input
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="추가 설명"
            />
          </div>

          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setOpen(false)}>
              취소
            </Button>
            <Button onClick={handleUpdate}>
              수정
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}